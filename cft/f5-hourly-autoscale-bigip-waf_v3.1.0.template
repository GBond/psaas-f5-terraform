{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "noCustomImageId": {
     "Fn::Equals": [
      "OPTIONAL",
      {
       "Ref": "customImageId"
      }
     ]
    },
    "optin": {
     "Fn::Equals": [
      "Yes",
      {
       "Ref": "allowUsageAnalytics"
      }
     ]
    }
  },
  "Description": "WAF v3.1.0: This template deploys an auto scaling group for utility instances BIG-IP. Example scaling policies and CloudWatch alarms are associated with the auto scaling group.",
  "Mappings": {
    "HourlyBigipWafRegionMap": {
      "ap-northeast-1": {
        "Best1000Mbps": "ami-2e4d3048", 
        "Best200Mbps": "ami-05522f63", 
        "Best25Mbps": "ami-d34c31b5", 
        "Best5000Mbps": "ami-fc4f329a"
      }, 
      "ap-northeast-2": {
        "Best1000Mbps": "ami-1955f777", 
        "Best200Mbps": "ami-a654f6c8", 
        "Best25Mbps": "ami-0f57f561", 
        "Best5000Mbps": "ami-4954f627"
      }, 
      "ap-south-1": {
        "Best1000Mbps": "ami-871e43e8", 
        "Best200Mbps": "ami-fc194493", 
        "Best25Mbps": "ami-851944ea", 
        "Best5000Mbps": "ami-941845fb"
      }, 
      "ap-southeast-1": {
        "Best1000Mbps": "ami-d5bffda9", 
        "Best200Mbps": "ami-2ab8fa56", 
        "Best25Mbps": "ami-a3b9fbdf", 
        "Best5000Mbps": "ami-3bbefc47"
      }, 
      "ap-southeast-2": {
        "Best1000Mbps": "ami-1eb2777c", 
        "Best200Mbps": "ami-dab376b8", 
        "Best25Mbps": "ami-38b3765a", 
        "Best5000Mbps": "ami-0db2776f"
      }, 
      "ca-central-1": {
        "Best1000Mbps": "ami-9278fcf6", 
        "Best200Mbps": "ami-a27efac6", 
        "Best25Mbps": "ami-62078306", 
        "Best5000Mbps": "ami-527afe36"
      }, 
      "eu-central-1": {
        "Best1000Mbps": "ami-39214056", 
        "Best200Mbps": "ami-06dcba69", 
        "Best25Mbps": "ami-a8ddbbc7", 
        "Best5000Mbps": "ami-6f214000"
      }, 
      "eu-west-1": {
        "Best1000Mbps": "ami-fc2f5f85", 
        "Best200Mbps": "ami-71275708", 
        "Best25Mbps": "ami-0227577b", 
        "Best5000Mbps": "ami-e711619e"
      }, 
      "eu-west-2": {
        "Best1000Mbps": "ami-da0ce9bd", 
        "Best200Mbps": "ami-530fea34", 
        "Best25Mbps": "ami-030fea64", 
        "Best5000Mbps": "ami-590eeb3e"
      }, 
      "sa-east-1": {
        "Best1000Mbps": "ami-a02960cc", 
        "Best200Mbps": "ami-6029600c", 
        "Best25Mbps": "ami-d62960ba", 
        "Best5000Mbps": "ami-9f2960f3"
      }, 
      "us-east-1": {
        "Best1000Mbps": "ami-781e0302", 
        "Best200Mbps": "ami-0f1b0675", 
        "Best25Mbps": "ami-0e170a74", 
        "Best5000Mbps": "ami-33190449"
      }, 
      "us-east-2": {
        "Best1000Mbps": "ami-9cffcbf9", 
        "Best200Mbps": "ami-06feca63", 
        "Best25Mbps": "ami-defcc8bb", 
        "Best5000Mbps": "ami-e0feca85"
      }, 
      "us-gov-west-1": {
        "Best1000Mbps": "ami-651d9504", 
        "Best200Mbps": "ami-72199113", 
        "Best25Mbps": "ami-a51991c4", 
        "Best5000Mbps": "ami-501c9431"
      },
      "us-west-1": {
        "Best1000Mbps": "ami-6a747d0a", 
        "Best200Mbps": "ami-24777e44", 
        "Best25Mbps": "ami-57747d37", 
        "Best5000Mbps": "ami-09747d69"
      }, 
      "us-west-2": {
        "Best1000Mbps": "ami-4225a53a", 
        "Best200Mbps": "ami-a01f9fd8", 
        "Best25Mbps": "ami-1325a56b", 
        "Best5000Mbps": "ami-2d25a555"
      }
    },
    "AWSBigipThrougput": {
      "25Mbps": {
        "Best": "Best25Mbps"
      },
      "200Mbps": {
        "Best": "Best200Mbps"
      },
      "1000Mbps": {
        "Best": "Best1000Mbps"
      },
      "5000Mbps": {
        "Best": "Best5000Mbps"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "DEPLOYMENT"
          },
          "Parameters": [
            "deploymentName"
          ]
        },
        {
          "Label": {
            "default": "NETWORKING CONFIGURATION"
          },
          "Parameters": [
            "vpc",
            "availabilityZones",
            "subnets",
            "restrictedSrcAddress",
            "bigipElasticLoadBalancer"
          ]
        },
        {
          "Label": {
              "default": "INSTANCE CONFIGURATION"
            },
          "Parameters": [
            "sshKey",
            "instanceType",
            "throughput",
            "customImageId",
            "adminUsername",
            "managementGuiPort",
            "timezone",
            "ntpServer"
          ]
        },
        {
          "Label": {
            "default": "AUTO SCALING CONFIGURATION"
          },
          "Parameters": [
            "scalingMinSize",
            "scalingMaxSize",
            "scaleDownBytesThreshold",
            "scaleUpBytesThreshold",
            "lowCpuThreshold",
            "highCpuThreshold",
            "notificationEmail"
          ]
        },
        {
          "Label": {
            "default": "WAF VIRTUAL SERVICE CONFIGURATION"
          },
          "Parameters": [
            "virtualServicePort",
            "applicationPort",
            "appInternalDnsName",
            "applicationPoolTagKey",
            "applicationPoolTagValue",
            "policyLevel"
          ]
        },
        {
          "Label": {
            "default": "TAGS"
          },
          "Parameters": [
            "application",
            "environment",
            "group",
            "owner",
            "costcenter"
          ]
        },
        {
         "Label": {
          "default": "TEMPLATE ANALYTICS"
         },
         "Parameters": [
          "allowUsageAnalytics"
         ]
        }
      ],
      "ParameterLabels": {
        "deploymentName" : {
          "default": "Deployment Name"
        },
        "vpc": {
          "default": "VPC ID"
        },
        "allowUsageAnalytics": {
         "default": "Send Anonymous Statistics to F5"
        },
        "availabilityZones": {
          "default": "Availability Zone(s)"
        },
        "subnets": {
          "default": "Subnet ID(s)"
        },
        "restrictedSrcAddress": {
          "default": "Restricted Source Address"
        },
        "bigipElasticLoadBalancer": {
          "default": "Elastic Load Balancer for BIG-IP VEs"
        },
        "sshKey": {
          "default": "SSH Key Name"
        },
        "instanceType": {
          "default": "AWS Instance Size"
        },
        "throughput": {
          "default": "Maximum Throughput"
        },
        "customImageId": {
          "default": "Custom Image Id"
        },
        "adminUsername": {
          "default": "BIG-IP Admin User for clustering"
        },
        "managementGuiPort": {
          "default": "Management Port"
        },
        "timezone":{
          "default": "Timezone (Olson)"
        },
        "ntpServer":{
          "default": "NTP Server"
        },
        "scalingMinSize": {
          "default": "Minimum Instances"
        },
        "scalingMaxSize": {
          "default": "Maximum Instances"
        },
        "scaleDownBytesThreshold": {
          "default": "Scale Down Bytes Threshold"
        },
        "scaleUpBytesThreshold": {
          "default": "Scale Up Bytes Threshold"
        },
        "highCpuThreshold": {
          "default": "High CPU % Threshold"
        },
        "lowCpuThreshold": {
          "default": "Low CPU % Threshold"
        },
        "notificationEmail": {
          "default": "Notification Email"
        },
        "virtualServicePort": {
          "default": "Virtual Service Port"
        },
        "applicationPort": {
          "default": "Application Pool Member Port"
        },
        "appInternalDnsName": {
          "default": "Application Pool DNS"
        },
        "applicationPoolTagKey": {
          "default": "Application Pool Tag Key"
        },
        "applicationPoolTagValue": {
          "default": "Application Pool Tag Value"
        },
        "policyLevel": {
          "default": "Web Application Firewall Policy Level"
        },
        "application": {
          "default": "Application"
        },
        "environment": {
          "default": "Environment"
        },
        "group": {
          "default": "Group"
        },
        "owner": {
          "default": "Owner"
        },
        "costcenter": {
          "default": "Cost Center"
        }
      }
    },
  "Version": "3.1.0"
  },
  "Parameters": {
    "deploymentName" : {
      "Description" : "Name the template uses to create object names",
      "Type" : "String",
      "MaxLength": 25,
      "Default": "example"
    },
    "vpc": {
      "Description": "VPC where you want to deploy the BIG-IP VEs",
      "Type": "AWS::EC2::VPC::Id"
    },
    "allowUsageAnalytics": {
     "AllowedValues": [
      "Yes",
      "No"
     ],
     "Default": "Yes",
     "Description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
     "Type": "String"
    },
    "availabilityZones": {
      "Description": "Availability Zones where you want to deploy BIG-IP VEs (we recommend at least 2)",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "subnets": {
      "Description": "Public or external subnet for the availability zones",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "restrictedSrcAddress" : {
      "Description" : " The IP address range x.x.x.x/x that can be used to SSH to the BIG-IP instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "bigipElasticLoadBalancer": {
      "Description": "Name of the AWS Elastic Load Balancer for the BIG-IP VEs",
      "Type": "String",
      "Default": "ExampleBigipELB"
    },
    "sshKey": {
      "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "instanceType": {
      "Description": "AWS Instance Size",
      "Type": "String",
      "Default": "m4.xlarge",
      "AllowedValues": [
        "m3.2xlarge",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid BIG-IP BEST virtual EC2 instance type."
    },
    "throughput": {
      "Description": "Maximum amount of throughput for BIG-IP VE",
      "Type": "String",
      "Default": "1000Mbps",
      "AllowedValues": [
        "25Mbps",
        "200Mbps",
        "1000Mbps",
        "5000Mbps"
      ],
      "ConstraintDescription": "Select the BIG-IP throughput you want to use"
    },
    "customImageId": {
     "ConstraintDescription": "Must be a valid AMI Id",
     "Default": "OPTIONAL",
     "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
     "MaxLength": 255,
     "MinLength": 1,
     "Type": "String"
    },
    "adminUsername": {
      "ConstraintDescription": "Verify your BIG-IP admin username. Note that the user name can contain only alphanumeric characters, periods ( . ), underscores ( _ ), or hyphens ( - ). The user name cannot be any of the following: adm, apache, bin, daemon, guest, lp, mail, manager, mysql, named, nobody, ntp, operator, partition, password, pcap, postfix, radvd, root, rpc, rpm, sshd, syscheck, tomcat, uucp, or vcsa.",
      "Description": "BIG-IP Admin User for clustering",
      "MaxLength": "255",
      "MinLength": "1",
      "AllowedPattern": "[a-zA-Z0-9._-]+",
      "Default": "cluster-admin",
      "Type": "String"
    },
    "managementGuiPort": {
      "Description": "Port for the BIG-IP management Configuration utility",
      "Type": "Number",
      "Default": 8443,
      "ConstraintDescription": "Must be a valid, unused port on the BIG-IP."
    },
    "timezone": {
      "Description": "Olson timezone string from /usr/share/zoneinfo",
      "Default": "UTC",
      "Type": "String"
    },
    "ntpServer": {
      "Description": "NTP server for this implementation",
      "Default": "0.pool.ntp.org",
      "Type": "String"
    },
    "scalingMinSize": {
      "Description": "Minimum number of BIG-IP instances (1-8) you want available in the Auto Scale Group",
      "Default": "1",
      "ConstraintDescription": "Must be a number between 1-8",
      "Type": "Number",
      "MaxValue": "8",
      "MinValue": "1"
    },
    "scalingMaxSize": {
      "Description": "Maximum number of BIG-IP instances (2-8) that can be created in the Auto Scale Group",
      "Default": "3",
      "ConstraintDescription": "Must be a number between 2-8.",
      "Type": "Number",
      "MaxValue": "8",
      "MinValue": "2"
    },
    "scaleDownBytesThreshold": {
      "Description": "Incoming bytes threshold to begin scaling down BIG-IP VE instances",
      "Default": "10000",   
      "Type": "Number"
    },
    "scaleUpBytesThreshold": {
      "Description": "Incoming bytes threshold to begin scaling up BIG-IP VE instances",
      "Default": "35000",
      "Type": "Number"
    },
    "highCpuThreshold": {
      "Description": "High CPU % threshold to begin scaling up BIG-IP VE instances",
      "Default": "80",
      "Type": "Number",
      "MaxValue": "100",
      "MinValue": "0"
    },
    "lowCpuThreshold": {
      "Description": "Low CPU % threshold to begin scaling down BIG-IP VE instances",
      "Default": "0",
      "Type": "Number",
      "MaxValue": "100",
      "MinValue": "0"
    },
    "notificationEmail": {
      "Description": "Valid email address to send Auto Scaling event notifications",
      "ConstraintDescription": "Must be a valid email address.",
      "AllowedPattern": ".+@.+",
      "Type": "String"
    },
    "virtualServicePort": {
      "Description": "Port for the virtual service on BIG-IP VE",
      "Default": "80",
      "ConstraintDescription": "Must be a valid port number (1-65535).",
      "Type": "Number",
      "MaxValue": "65535",
      "MinValue": "1"
    },
    "applicationPort": {
      "Description": "Port for the application pool member on BIG-IP VE",
      "Default": "80",
      "ConstraintDescription": "Must be a valid port number (1-65535).",
      "Type": "Number",
      "MaxValue": "65535",
      "MinValue": "1"
    },
    "appInternalDnsName": {
      "Description": "DNS name poolapp.example.com for the application pool.  This is not required if you are using the Service Discovery feature.",
      "Type": "String",
      "Default": "www.example.com"
    },
    "applicationPoolTagKey": {
      "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with this key and the value you specify next.",
      "Type": "String",
      "Default": "default"
    },
    "applicationPoolTagValue": {
      "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with the key you specified and this value.",
      "Type": "String",
      "Default": "default"
    },
    "policyLevel": {
      "Description": "WAF Policy Level you want to use to protect the applications",
      "Type": "String",
      "Default": "high",
      "AllowedValues": [
        "low",
        "medium",
        "high"
      ],
      "ConstraintDescription": "Select the WAF Policy Level you want to use"
    },
    "application": {
      "Default": "f5app",
      "Description": "Application Tag",
      "Type": "String"
    },
    "environment": {
      "Default": "f5env",
      "Description": "Environment Name Tag",
      "Type": "String"
    },
    "group": {
      "Default": "f5group",
      "Description": "Group Tag",
      "Type": "String"
    },
    "owner": {
      "Default": "f5owner",
      "Description": "Owner Tag",
      "Type": "String"
    },
    "costcenter": {
      "Default": "f5costcenter",
      "Description": "Cost Center Tag",
      "Type": "String"
    }
  },
  "Resources": {
    "bigipSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "GroupDescription": "Enable SSH access via port 22 and enable access to virtual servers on 80 and 443",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "restrictedSrcAddress" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "managementGuiPort"
            },
            "ToPort": {
              "Ref": "managementGuiPort"
            },
            "CidrIp": { "Ref": "restrictedSrcAddress" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "BIG-IP Autoscale Security Group: ",
                  {
                    "Ref": "deploymentName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "application"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "environment"
            }
          },
          {
            "Key": "Group",
            "Value": {
              "Ref": "group"
            }
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "owner"
            }
          },
          {
            "Key": "Costcenter",
            "Value": {
              "Ref": "costcenter"
            }
          }
        ]
      }
    },
    "bigipSecurityGroupIngressAsmPolicySync": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "bigipSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "6123",
        "ToPort": "6128",
        "SourceSecurityGroupId": { "Ref": "bigipSecurityGroup" }
      }
    },
    "bigipSecurityGroupIngressManagementGuiPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "bigipSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": { "Ref": "managementGuiPort" },
        "ToPort": { "Ref": "managementGuiPort" },
        "SourceSecurityGroupId": { "Ref": "bigipSecurityGroup" }
      }
    },
    "bigipSecurityGroupIngressConfigSync": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "bigipSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "4353",
        "ToPort": "4353",
        "SourceSecurityGroupId": { "Ref": "bigipSecurityGroup" }
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl"
      }
    },
    "SQSQueue": {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "MessageRetentionPeriod": 3600
      }
    },
    "BigipAutoScalingAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "BigipAutoScalingAcccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:*:s3:::",
                        {
                          "Ref": "S3Bucket"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:*:s3:::",
                        {
                          "Ref": "S3Bucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [ "SQSQueue", "Arn" ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                      "autoscaling:DescribeAutoScalingGroups",
                      "autoscaling:DescribeAutoScalingInstances",
                      "autoscaling:SetInstanceProtection",
                      "ec2:DescribeInstances",
                      "ec2:DescribeInstanceStatus",
                      "ec2:DescribeAddresses",
                      "ec2:AssociateAddress",
                      "ec2:DisassociateAddress",
                      "ec2:DescribeNetworkInterfaces",
                      "ec2:DescribeNetworkInterfaceAttributes",
                      "ec2:DescribeRouteTables",
                      "ec2:ReplaceRoute",
                      "ec2:assignprivateipaddresses",
                      "sts:AssumeRole",
                      "cloudwatch:PutMetricData"
                  ],
                  "Resource": [
                      "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "BigipAutoScalingInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BigipAutoScalingAccessRole"
          }
        ]
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "notificationEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "BigipLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/config/cloud/asm-policy-linux.tar.gz": {
                "source": "http://cdn.f5.com/product/blackbox/aws/asm-policy-linux.tar.gz",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/f5.http.v1.2.0rc7.tmpl": {
                "source": "http://cdn.f5.com/product/blackbox/aws/f5.http.v1.2.0rc7.tmpl",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/f5-cloud-libs.tar.gz": {
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v4.1.1/dist/f5-cloud-libs.tar.gz",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/f5-cloud-libs-aws.tar.gz": {
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v2.0.3/dist/f5-cloud-libs-aws.tar.gz",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
                "group": "root",
                "mode": "000644",
                "owner": "root",
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v2.0.3/f5-cloud-logger/f5.cloud_logger.v1.0.0.tmpl"
              },
              "/config/cloud/aws/f5.service_discovery.tmpl": {
                "group": "root",
                "mode": "000644",
                "owner": "root",
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v2.0.3/f5-service-discovery/f5.service_discovery.tmpl"
              },
              "/config/cloud/aws/onboard_config_vars": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "# Generated from v3.1.0\n",
                      "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                      "region='",{"Ref": "AWS::Region"},"'\n",
                      "deploymentName='",{"Ref": "deploymentName"},"'\n",
                      "adminUsername='",{"Ref": "adminUsername"},"'\n",
                      "managementGuiPort='",{"Ref": "managementGuiPort"},"'\n",
                      "timezone='",{"Ref": "timezone"},"'\n",
                      "ntpServer='",{"Ref": "ntpServer"},"'\n",
                      "virtualServicePort='",{"Ref": "virtualServicePort"},"'\n",
                      "applicationPort='",{"Ref": "applicationPort"},"'\n",
                      "appInternalDnsName='",{"Ref": "appInternalDnsName"},"'\n",
                      "applicationPoolTagKey='",{"Ref": "applicationPoolTagKey"},"'\n",
                      "applicationPoolTagValue='",{"Ref": "applicationPoolTagValue"},"'\n",
                      "policyLevel='",{"Ref": "policyLevel"},"'\n",
                      "s3Bucket='",{"Ref": "S3Bucket"},"'\n",
                      "sqsUrl='",{"Ref": "SQSQueue"},"'\n"
                    ]
                  ]
                }
              },
              "/config/verifyHash": {
                "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) dd2dbd1375f6fff639f87cd2ba781e9e09cd193c52b40a57697809a73658706f559a1825eede891590db4443cc33f89d76928f55034d352facd157e61ed3bb88\n            set hashes(f5-cloud-libs-aws.tar.gz) e06f724ff1c7fc41d95ef87fc6f7a118d7e64d5555b5e9548ee7582bc3eb8d461ca72266a0758837a951ccd465876c877329fe8a47b38da5183c832680b76b93\n            set hashes(f5-cloud-libs-azure.tar.gz) f1a5e8cfc639063885b595282cb5befdaf88d51ef62bd26e3658e2f3f3b5bbbb2ce0ba54ec1cd12ba87a2336134588affe63052511f7c6c93fb7fc73b8a0e095\n            set hashes(f5-cloud-libs-gce.tar.gz) 66072a397912a2f64ef74f2bb3fcc51c2ca90002d7df67534cf1ace031251d0a2d08f5efb492fa3c46718c65fb24234d2c863dd457e1d300b41dd6f82aca9849\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 7a4660468dffdc4f6d9aec4c1f9d22abfb3e484e7d6fe6a12fc9ab3eec3819dc34d133aea3cce4fdd87a0f4045069270061f2ea1ee7735922e4371592e498a0b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) a26d5c470e70b821621476bcfd0579dbc0964f6a54158bc6314fa1e2f63b23bf3f3eb43ade5081131c24e08579db2e1e574beb3f8d9789d28acb4f312fad8c3e\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature O+tf8OQziIu9bjatG6z35/qd8lx2wn2pgWBxRm5l2SpJ6LWuYSitk7VNqUpxz2iH/pq7Vrc8d1P/FGq4IoZUGRh5D94OHyODXc02pe/o+sla5g826xjHUrDfCAMval31cg7CRZ/htVx+bhpdiKhg4Zfypgg0USF1mKE9g8bEdvIKbPlWil4HIymEKV7gbq7ZbK86Mn0V05+B72D/k8ER/Lman0dle1XB3iHkiOBj2Qm9PPhNtvxS6ean0MDGoIrTewfIT41OSrDUd5YKrXt4Ee4YF8++8a2UBAW+UMGMibxF+vVLTxXUUM5/20goExy9yGkjHKHEVyS+9cJ40kdg9A==\n    signing-key /Common/f5-irule\n}",
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/config/cloud/aws/run_autoscale_update.sh": {
                "content": {
                  "Fn::Join": [
                      "",
                      [
                          "#!/bin/bash\n",
                          "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js",
                          " --cloud aws --provider-options '",
                          "s3Bucket:",
                          {"Ref": "S3Bucket"},
                          ",sqsUrl:",
                          {"Ref": "SQSQueue"},
                          ",mgmtPort:",
                          {"Ref": "managementGuiPort"},
                          "'",
                          " --host localhost",
                          " --port ",
                          {"Ref": "managementGuiPort"},
                          " --user ",
                          {"Ref": "adminUsername"},
                          " --password-url file:///config/cloud/aws/.adminPassword",
                          " --password-encrypted",
                          " --device-group autoscale-group",
                          " --cluster-action update",
                          " --log-level info --output /var/log/cloud/aws/aws-autoscale.log\n"
                      ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/aws/run_autoscale_backup.sh": {
                "content": {
                  "Fn::Join": [
                      "",
                      [
                          "#!/bin/bash\n",
                          "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js",
                          " --cloud aws --provider-options '",
                          "s3Bucket:",
                          {"Ref": "S3Bucket"},
                          ",sqsUrl:",
                          {"Ref": "SQSQueue"},
                          ",mgmtPort:",
                          {"Ref": "managementGuiPort"},
                          "'",
                          " --host localhost",
                          " --port ",
                          {"Ref": "managementGuiPort"},
                          " --user ",
                          {"Ref": "adminUsername"},
                          " --password-url file:///config/cloud/aws/.adminPassword",
                          " --password-encrypted",
                          " --device-group autoscale-group",
                          " --cluster-action backup-ucs",
                          " --log-level info --output /var/log/cloud/aws/aws-autoscale.log\n"
                      ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/aws/custom-config.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "# Generated from v3.1.0\n",
                      "date\n",
                      ". /config/cloud/aws/onboard_config_vars\n",
                      "echo \"applicationPoolTagKey=$applicationPoolTagKey\" \n",
                      "echo \"applicationPoolTagValue=$applicationPoolTagValue\" \n",
                      "tmsh create sys icall script uploadMetrics definition { exec /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/reportMetrics.sh }\n",
                      "tmsh create sys icall handler periodic /Common/metricUploadHandler { first-occurrence now interval 60 script /Common/uploadMetrics }\n",
                      "tmsh save /sys config\n",
                      "echo 'Attempting to Join or Initiate Autoscale Cluster' \n",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort} --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --password-encrypted --device-group autoscale-group --block-sync -c join --log-level info --output /var/log/cloud/aws/aws-autoscale.log\n",
                      "if [ -f /config/cloud/master ]; then \n",
                      "  if `jq '.ucsLoaded' < /config/cloud/master`; then \n",
                      "    echo \"UCS backup loaded from backup folder in S3 bucket ${s3Bucket}.\"\n",
                      "  else\n",                      
                      "    echo 'SELF-SELECTED as Master ... Initiated Autoscale Cluster ... Loading default config'\n",
                      "    tmsh modify cm device-group autoscale-group asm-sync enabled\n",
                      "    tmsh load sys application template /config/cloud/f5.http.v1.2.0rc7.tmpl\n",
                      "    tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\n",
                      "    tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\n",
                      "    source /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForBigip.sh;wait-for-bigip\n",
                      "    ### START CUSTOM CONFIGURTION:  Policy Name/Policy URL, etc. \n",
                      "    tmsh load asm policy file /config/cloud/asm-policy-linux-${policyLevel}.xml\n",
                      "    # modify asm policy names below (ex. /Common/linux-${policyLevel}) to match policy name in the xml file\n",
                      "    tmsh modify asm policy /Common/linux-${policyLevel} active\n",
                      "    tmsh create ltm policy app-ltm-policy strategy first-match legacy\n",
                      "    tmsh modify ltm policy app-ltm-policy controls add { asm }\n",
                      "    tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-${policyLevel} } } } }\n",
                      "    # deploy logging profiles\n",
                      "    # profile names\n",
                      "    local_asm_log_name='Log illegal requests'\n",
                      "    if [ \"${applicationPoolTagKey}\" != \"default\" ]\n",
                      "    then\n",
                      "        tmsh create ltm pool ${deploymentName} { monitor http }\n",
                      "        tmsh create sys application service ${deploymentName} { device-group autoscale-group template f5.http.v1.2.0rc7 lists add { asm__security_logging { value { \"${local_asm_log_name}\" } } } tables add { pool__members { column-names { addr port connection_limit } rows {{ row { ${deploymentName} ${applicationPort} 0 }}}}} variables add { pool__pool_to_use { value /Common/${deploymentName} } asm__use_asm { value app-ltm-policy } pool__addr { value 0.0.0.0 } pool__mask { value 0.0.0.0 } pool__port { value ${virtualServicePort} } monitor__http_version { value http11 } }}\n",
                      "        tmsh create sys application service ${deploymentName}_sd { template f5.service_discovery variables add { cloud__aws_use_role { value no } cloud__cloud_provider { value aws } cloud__aws_region { value ${region} } pool__interval { value 15 } pool__lb_method_choice { value least-connections-member } pool__member_conn_limit { value 0 } pool__pool_to_use { value /Common/${deploymentName} } pool__member_port { value ${applicationPort} } pool__public_private { value private } pool__tag_key { value ${applicationPoolTagKey} } pool__tag_value { value ${applicationPoolTagValue} } }}\n",
                      "    else\n",
                      "        tmsh create ltm node ${deploymentName} fqdn { name ${appInternalDnsName} }\n",
                      "        tmsh create sys application service ${deploymentName} { device-group autoscale-group template f5.http.v1.2.0rc7 tables add { pool__members { column-names { addr port connection_limit } rows {{ row { ${deploymentName} ${applicationPort} 0 }}}}} variables add { asm__use_asm { value app-ltm-policy } pool__addr { value 0.0.0.0 } pool__mask { value 0.0.0.0 } pool__port { value ${virtualServicePort} } monitor__http_version { value http11 } }}\n",
                      "    fi\n",
                      "    ### END CUSTOM CONFIGURATION\n",
                      "    tmsh save /sys config\n",
                      "    f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort}",
                      "      --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --password-encrypted -c unblock-sync --log-level info --output /var/log/cloud/aws/aws-autoscale.log\n",
                      "  fi\n",
                      "fi\n",
                      "(crontab -l 2>/dev/null; echo '*/1 * * * * /config/cloud/aws/run_autoscale_update.sh') | crontab -\n",
                      "(crontab -l 2>/dev/null; echo '59 23 * * * /config/cloud/aws/run_autoscale_backup.sh') | crontab -\n",
                      "tmsh save /sys config\n",
                      "date\n",
                      "echo 'custom-config.sh complete'\n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/installCloudLibs.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/bash",
                      "# Generated from v3.1.0\n",
                      "echo about to execute",
                      "checks=0",
                      "while [ $checks -lt 120 ]; do echo checking mcpd",
                      "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                      "    if [ $? == 0 ]; then",
                      "        echo mcpd ready",
                      "        break",
                      "    fi",
                      "    echo mcpd not ready yet",
                      "    let checks=checks+1",
                      "    sleep 10",
                      "done",
                      "echo loading verifyHash script",
                      "if ! tmsh load sys config merge file /config/verifyHash; then",
                      "    echo cannot validate signature of /config/verifyHash",
                      "    exit",
                      "fi",
                      "echo loaded verifyHash",
                      "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
                      "for fileToVerify in \"${filesToVerify[@]}\"",
                      "do",
                      "    echo verifying \"$fileToVerify\"",
                      "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
                      "       echo \"$fileToVerify\" is not valid",
                      "        exit 1",
                      "    fi",
                      "    echo verified \"$fileToVerify\"",
                      "done",
                      "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
                      "echo expanding f5-cloud-libs.tar.gz",
                      "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
                      "echo installing dependencies",
                      "tar xvfz /config/cloud/asm-policy-linux.tar.gz -C /config/cloud",
                      "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
                      "echo cloud libs install complete",
                      "touch /config/cloud/cloudLibsReady"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/getNameServer.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "# Generated from v3.1.0\n",
                      "INTERFACE=$1",
                      "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                      "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                      "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                      "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                      "echo $NAME_SERVER"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/waitThenRun.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/bash",
                      "# Generated from v3.1.0\n",
                      "while true; do echo waiting for cloud libs install to complete",
                      "    if [ -f /config/cloud/cloudLibsReady ]; then",
                      "        echo cloud libs installed",
                      "        break",
                      "    else",
                      "        sleep 10",
                      "    fi",
                      "done",
                      "\"$@\""
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "000-disable-1nicautoconfig": {
                "command": "/usr/bin/setdb provision.1nicautoconfig disable"
              },
              "010-install-libs": {
                "command": "mkdir -p /var/log/cloud/aws; nohup /config/installCloudLibs.sh &>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null &"
              },
              "020-generate-password": {
                "command": {
                 "Fn::Join": [
                  "",
                  [
                   "nohup /config/cloud/waitThenRun.sh",
                   " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                   " --signal PASSWORD_CREATED",
                   " --file f5-rest-node",
                   " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
                   " --log-level info",
                   " -o /var/log/cloud/aws/generatePassword.log",
                   " &>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                   " &"
                  ]
                 ]
                }
              },
              "030-create-admin-user": {
                "command": {
                 "Fn::Join": [
                  "",
                  [
                   "nohup /config/cloud/waitThenRun.sh",
                   " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                   " --wait-for PASSWORD_CREATED",
                   " --signal ADMIN_CREATED",
                   " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
                   " --cl-args '--user ",
                   { "Ref": "adminUsername" },
                   " --password-file /config/cloud/aws/.adminPassword",
                   " --password-encrypted",
                   "'",
                   " --log-level info",
                   " -o /var/log/cloud/aws/createUser.log",
                   " &>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                   " &"
                  ]
                 ]
                }
              },
              "040-network-config": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "nohup /config/cloud/waitThenRun.sh",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                      "--file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws/1nicSetup.sh",
                      "--cwd /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws",
                      "--log-level info",
                      "-o /var/log/cloud/aws/1nicSetup.log",
                      "--wait-for ADMIN_CREATED",
                      "--signal NETWORK_CONFIG_DONE",
                      "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                      "&"
                    ]
                  ]
                }
              },
              "050-onboard-BIG-IP": {
                "command": {
                 "Fn::If": [
                  "optin",
                  {
                    "Fn::Join": [
                      " ",
                      [
                        "DEPLOYMENTID=`echo \"",
                        {
                        "Ref": "AWS::StackId"
                        },
                        "\"|sha512sum|cut -d \" \" -f 1`;",
                        "CUSTOMERID=`echo \"",
                        {
                        "Ref": "AWS::AccountId"
                        },
                        "\"|sha512sum|cut -d \" \" -f 1`;",
                        "NAME_SERVER=`/config/cloud/getNameServer.sh eth0`;",
                        "nohup /config/cloud/waitThenRun.sh",
                        "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                        "--log-level info",
                        "--wait-for NETWORK_CONFIG_DONE",
                        "-o /var/log/cloud/aws/onboard.log",
                        "--host localhost",
                        "--user",
                        { "Ref": "adminUsername" },
                        "--password-url file:///config/cloud/aws/.adminPassword",
                        "--password-encrypted",
                        "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                        "--ntp ",
                        { "Ref": "ntpServer" },
                        "--tz ",
                        { "Ref": "timezone" },
                        "--dns ${NAME_SERVER}",
                        "--port 8443",
                        "--ssl-port ",
                        { "Ref": "managementGuiPort" },
                        "--module ltm:nominal",
                        "--module asm:nominal",
                        "--metrics \"cloudName:aws,region:${region},bigipVersion:13.1.0.2,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-hourly-autoscale-bigip-waf.template,templateVersion:3.1.0,licenseType:hourly\"",
                        "--ping",
                        "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                        "&"
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      " ",
                      [
                        "NAME_SERVER=`/config/cloud/getNameServer.sh eth0`;",
                        "nohup /config/cloud/waitThenRun.sh",
                        "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                        "--log-level info",
                        "--wait-for NETWORK_CONFIG_DONE",
                        "-o /var/log/cloud/aws/onboard.log",
                        "--host localhost",
                        "--user",
                        { "Ref": "adminUsername" },
                        "--password-url file:///config/cloud/aws/.adminPassword",
                        "--password-encrypted",
                        "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                        "--ntp ",
                        { "Ref": "ntpServer" },
                        "--tz ",
                        { "Ref": "timezone" },
                        "--dns ${NAME_SERVER}",
                        "--port 8443",
                        "--ssl-port ",
                        { "Ref": "managementGuiPort" },
                        "--module ltm:nominal",
                        "--module asm:nominal",
                        "--ping",
                        "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                        "&"
                      ]
                    ]
                  }
                 ]
                }
              },
              "060-custom-config": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "nohup /config/cloud/waitThenRun.sh",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                      "--log-level info",
                      "--file /config/cloud/aws/custom-config.sh",
                      "--cwd /config/cloud/aws",
                      "-o /var/log/cloud/aws/custom-config.log",
                      "--wait-for ONBOARD_DONE",
                      "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                      "&"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
         {
          "DeviceName": "/dev/xvda",
          "Ebs": {
           "DeleteOnTermination": "true",
           "VolumeType": "gp2"
          }
         },
         {
          "DeviceName": "/dev/xvdb",
          "NoDevice": "true"
         }
        ],
        "AssociatePublicIpAddress": true,
        "ImageId": {
         "Fn::If": [
          "noCustomImageId",
          {
            "Fn::FindInMap": [
              "HourlyBigipWafRegionMap",
              {
                "Ref": "AWS::Region"
              },
              {
                "Fn::FindInMap": [
                  "AWSBigipThrougput",
                  {
                    "Ref": "throughput"
                  },
                    "Best"
                ]
              }
            ]
          },
          {
            "Ref": "customImageId"
          }
         ]
        },
        "InstanceMonitoring": false,
        "InstanceType": {
          "Ref": "instanceType"
        },
        "IamInstanceProfile": {
          "Ref": "BigipAutoScalingInstanceProfile"
        },
        "KeyName": {
          "Ref": "sshKey"
        },
        "SecurityGroups": [
          {
            "Ref": "bigipSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r BigipLaunchConfig",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "BigipAutoscaleGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "subnets" },
        "Cooldown": "2400",
        "LoadBalancerNames": [
          {
            "Ref": "bigipElasticLoadBalancer"
          }
        ],
        "HealthCheckGracePeriod": "1800",
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "BigipLaunchConfig"
        },
        "MaxSize": {
          "Ref": "scalingMaxSize"
        },
        "MinSize": {
          "Ref": "scalingMinSize"
        },
        "DesiredCapacity" : {
          "Ref": "scalingMinSize"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "SNSTopic"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "BIG-IP Autoscale Instance: ",
                  {
                    "Ref": "deploymentName"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "application"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "environment"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Group",
            "Value": {
              "Ref": "group"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "owner"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Costcenter",
            "Value": {
              "Ref": "costcenter"
            },
            "PropagateAtLaunch": true
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1",
          "PauseTime": "PT30M"
        }
      }
    },
    "BigipScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Cooldown": "2400",
        "ScalingAdjustment": "1"
      }
    },
    "BigipScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Cooldown": "2400",
        "ScalingAdjustment": "-1"
      }
    },
    "BigipHighbytesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": "BigipAutoscaleGroup",
      "Properties": {
        "ActionsEnabled": "True",
        "AlarmActions": [
          {
            "Ref": "BigipScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Throughput exceeds average threshold after 1 successive interval of 1 minute",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "throughput-per-sec",
        "Namespace": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "scaleUpBytesThreshold"
        }
      }
    },
    "BigipLowbytesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": "BigipAutoscaleGroup",
      "Properties": {
        "ActionsEnabled": "True",
        "AlarmActions": [
          {
            "Ref": "BigipScaleDownPolicy"
          }
        ],
        "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "10",
        "MetricName": "throughput-per-sec",
        "Namespace": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Period": "300",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "scaleDownBytesThreshold"
        }
      }
    },
    "BigipHighCpuAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": "BigipAutoscaleGroup",
      "Properties": {
        "ActionsEnabled": "True",
        "AlarmActions": [
          {
            "Ref": "BigipScaleUpPolicy"
          }
        ],
        "AlarmDescription": "CPU usage % exceeds average threshold after 1 successive interval of 1 minute",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "tmm-stat",
        "Namespace": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "highCpuThreshold"
        }
      }
    },
    "BigipLowCpuAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": "BigipAutoscaleGroup",
      "Properties": {
        "ActionsEnabled": "True",
        "AlarmActions": [
          {
            "Ref": "BigipScaleDownPolicy"
          }
        ],
        "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "10",
        "MetricName": "tmm-stat",
        "Namespace": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Period": "300",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "lowCpuThreshold"
        }
      }
    }
  },
  "Outputs": {
    "bigipAutoscaleGroup": {
      "Value": {
        "Ref": "BigipAutoscaleGroup"
      }
    },
    "bigipSecurityGroup": {
      "Value": {
        "Ref": "bigipSecurityGroup"
      }
    },
    "s3Bucket": {
      "Value": {
        "Ref": "S3Bucket"
      }
    }
  }
}